package com.griddynamix.assignment.urlshortener.controller;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.NoSuchElementException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.validator.routines.UrlValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.server.ResponseStatusException;

import com.griddynamix.assignment.urlshortener.dto.OriginalUrl;
import com.griddynamix.assignment.urlshortener.dto.ShortenedUrl;
import com.griddynamix.assignment.urlshortener.err.InvalidUrlMessageError;
import com.griddynamix.assignment.urlshortener.service.UrlShortenerService;
import com.griddynamix.assignment.urlshortener.utils.UrlUtil;
import com.griddynamix.assignment.urlshortener.utils.ValidationUtil;

@Controller
public class UrlShortenerController {

	Logger logger = LoggerFactory.getLogger(UrlShortenerController.class);
	
	protected final UrlShortenerService service;
	
	/**
	 * Instantiates a new url shortener controller.
	 *
	 * @param service the service
	 */
	@Autowired
	public UrlShortenerController(UrlShortenerService service) {
		this.service = service;
	}
	
	 /**
 	 * Creates the shortened url.
 	 *
 	 * @param originalUrl Takes an object of OriginalUrl supplied in the request body
 	 * @param request the request
 	 * @return An object of ShortenedUrl serialized as JSON in the response
 	 */
	
	@PostMapping("/shortUrl")
	public ResponseEntity<?> createShortenedUrl(@RequestBody OriginalUrl originalUrl, HttpServletRequest request) {
		
		ResponseEntity<InvalidUrlMessageError> message = ValidationUtil.validateUrl(originalUrl);
		if(message != null) {
			return message;
		}
		
		String baseUrl = null;
		
		try {
			baseUrl = UrlUtil.getBaseUrl(request.getRequestURL().toString());
		} catch (MalformedURLException e) {
			logger.error("Malformed request url");
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Request URL is invalid", e);
		}
		
		ShortenedUrl shortUrl = service.getShortenedUrl(originalUrl);
		shortUrl.setShortenedUrl(baseUrl + shortUrl.getShortenedUrl());
		return new ResponseEntity<>(shortUrl,HttpStatus.OK);
	}
	
	/**
	 * Redirect to original url.
	 *
	 * @param shortenedString Shortened string - Text is Base62 encoded generated by "/shorten"
	 * @param response HttpServletResponse - used to redirect to original URL
	 */
    @GetMapping("/{shortenedString}")
    public void redirectToOriginalUrl(@PathVariable String shortenedString, HttpServletResponse response) {
        try {
        	OriginalUrl originalUrl = service.getOriginalUrl(shortenedString);

            logger.info(String.format("Redirecting to %s", originalUrl.getUrl()));
            
            response.sendRedirect(originalUrl.getUrl());
        } catch (NoSuchElementException e) {
            logger.error(String.format("No URL found for %s in the db", shortenedString));
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "URL not found", e);
        } catch (IOException e) {
            logger.error("Could not redirect to the original url");
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Could not redirect to the original URL", e);
        }
    }
}
